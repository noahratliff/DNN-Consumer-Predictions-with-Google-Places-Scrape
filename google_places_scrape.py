# -*- coding: utf-8 -*-
"""Google-Places-Scrape.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YJjyPnOGyQiEvwlQMEDqts0DgTLctvFQ
"""

!pip install googlemaps
!pip install prettyprint
!pip install xlsxwriter
!pip install --upgrade git+https://github.com/m-wrzr/populartimes

import googlemaps
import json
import pprint
import xlsxwriter
import time
import populartimes
import csv

# Define the API Key.
API_KEY = 'YOUR-API-KEY-HERE'

stored_results = []

# Define the Client
gmaps = googlemaps.Client(key = API_KEY)
n=0

for i in types:
  places_result  = gmaps.places_nearby(location='-33.8670522,151.1957362', radius = 10000, type = i)
  time.sleep(3)
      
  for place in places_result['results']:

      # define the place id, needed to get place details. Formatted as a string.
      my_place_id = place['place_id']
      poptimes = populartimes.get_id(API_KEY, my_place_id)
      try:
        poptimes['Monday'] = poptimes['populartimes'][0]['data']
        poptimes['Tuesday'] = poptimes['populartimes'][1]['data']
        poptimes['Wednesday'] = poptimes['populartimes'][2]['data']
        poptimes['Thursday'] = poptimes['populartimes'][3]['data']
        poptimes['Friday'] = poptimes['populartimes'][4]['data']
        poptimes['Saturday'] = poptimes['populartimes'][5]['data']
        poptimes['Sunday'] = poptimes['populartimes'][6]['data']
      except:
        poptimes['Monday'] = 0
        poptimes['Tuesday'] = 0
        poptimes['Wednesday'] = 0
        poptimes['Thursday'] = 0
        poptimes['Friday'] = 0
        poptimes['Saturday'] = 0
        poptimes['Sunday'] = 0
      poptimes['LAT'] = poptimes['coordinates']['lat']
      poptimes['LON'] = poptimes['coordinates']['lng']

      try:
        poptimes['avg_time'] = (poptimes['time_spent'][0]+poptimes['time_spent'][1])/2
      except:
        pass

      if 'time_wait' in poptimes:
        pass
      else:
        poptimes["time_wait"] = 0

      stored_results.append(poptimes)
      n = n+1
      if n % 25 == 0:
        print("Current location type: "+str(i))
        print('Number of completed locations: '+ str(n))
        print()
      else:
        pass

  # -------------- DUMPING VALUES IN EXCEL -----------------------

# define the headers, that is just the key of each result dictionary.
row_headers = stored_results[0].keys()

f = open("sample.csv", "w")
writer = csv.DictWriter(f, fieldnames=row_headers)
writer.writeheader()
writer.writerows(stored_results)
f.close()

row_headers = list(stored_results[143].keys()) + ['populartimes', 'avg_time','time_spent', 'current_popularity']
print(row_headers)

f = open("sample.csv", "w")
writer = csv.DictWriter(f, fieldnames=row_headers)
writer.writeheader()
writer.writerows(stored_results)
f.close()

!ls -lss
from google.colab import files
files.download('sample.csv')

types = ['accounting',
'airport',
'amusement_park',
'aquarium',
'art_gallery',
'atm',
'bakery',
'bank',
'bar',
'beauty_salon',
'bicycle_store',
'book_store',
'bowling_alley',
'bus_station',
'cafe',
'campground',
'car_dealer',
'car_rental',
'car_repair',
'car_wash',
'casino',
'cemetery',
'church',
'city_hall',
'clothing_store',
'convenience_store',
'courthouse',
'dentist',
'department_store',
'doctor',
'drugstore',
'electrician',
'electronics_store',
'embassy',
'fire_station',
'florist',
'funeral_home',
'furniture_store',
'gas_station',
'grocery_or_supermarket',
'gym',
'hair_care',
'hardware_store',
'hindu_temple',
'home_goods_store',
'hospital',
'insurance_agency',
'jewelry_store',
'laundry',
'lawyer',
'library',
'light_rail_station',
'liquor_store',
'local_government_office',
'locksmith',
'lodging',
'meal_deli',
'meal_takeaway',
'mosque',
'movie_rental',
'movie_theater',
'moving_company',
'museum',
'night_club',
'painter',
'park',
'parking',
'pet_store',
'pharmacy',
'physiotherapist',
'plumber',
'police',
'post_office',
'primary_school',
'real_estate_agency',
'restaurant',
'roofing_contractor',
'rv_park',
'school',
'secondary_school',
'shoe_store',
'shopping_mall',
'spa',
'stadium',
'storage',
'store',
'subway_station',
'supermarket',
'synagogue',
'taxi_stand',
'tourist_attraction',
'train_station',
'transit_station',
'travel_agency',
'university',
'veterinary_care',
'zoo']

print(types)

# geometry
# icon
# id
# name
# opening_hours
# photos
# place_id
# plus_code
# rating
# reference
# scope
# types
# user_ratings_total
# vicinity
